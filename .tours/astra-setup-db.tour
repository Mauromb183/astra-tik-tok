{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "1. Astra Getting Started",
  "nextTour": "2. Start Building a React app",
  "steps": [
    {
      "title": "Authentication",
      "description": "## Initial Setup\nLet's start by using `create-react-app` to get a basic React app up and running. We'll use this as a base and start adding our custom components.\n\n**RUN**\n>> npx -y create-react-app astra-tik-tok; cd astra-tik-tok\n\n## Authentication\nNext, we need to connect to our Astra DB and store an authentication token in order to store and retrieve data. We'll use `astra-setup` for this. *Note: `astra-setup` requires an authentication token, and will guide you on how to generate this in your Astra DB dashboard.*\n\n**RUN**\n>> astra-setup workshops tiktok\n\n[Visit Astra](https://astra.datastax.com) and follow the instructions in the console to get your token for the astra-setup step.\n\n![Image of Yaktocat](https://github.com/datastaxdevs/workshop-spring-stargate/raw/main/images/tutorials/astra-create-db.gif?raw=true)\n"
    },
    {
      "title": "Setup Git",
      "description": "## Set up local git repository\n\nIn order to work with netlify, where we'll be hosting the application in the cloud, a github repository needs to be create.\n\nFirst, git wants to know a little bit about you\n\n>> git config --global user.email TikTok@example.com\n\n>> git config --global user.name 'Tik Tok'\n\nNow, make your directory into a git repository.\n\n>> git init\n\nRename the master branch to \"main\":\n\n>> git branch -M main\n\nAdd all the files in your workspace.\n\n>> git add -A\n\n... and take out the ones we don't need.\n\n>> git rm -rf yarn.lock src/App.test.js src/reportWebVitals.js src/setupTests.js\n\nCommit your starting lineup to your local git repository.\n\n>> git commit -a -m 'Initial commit'\n\n"
    },
    {
      "title": "Setup github repository",
      "description": "(*Those steps are optional but help you keeping the source code in your account*). If you do not have a GitHub account, **[create one now](https://github.com)**.\n* Use the github command line tool (gh) to authenticate with Github.\n\n>> gh auth login\n\n* What account do you want to log into? *GitHub.com*\n* What is your preferred protocol for Git operations? *HTTPs*\n* Authenticate Git with your GitHub credentials? *Y*\n* How would you like to authenticate GitHub CLI? Login with a web browser\n* It will try (but fail) to open the site over to the right. **Ignore that**, and [Go directly to the auth website](https://github.com/login/device)\n* Copy the one-time code\n* Finish by pressing ENTER in the gitpod terminal.\n\n>> gh repo create\n\n* Repository name: *astra-tik-tok*\n* Repository description: *My repository*\n* Visibility: *Public*\n* This will add an \"origin\" git remote to your local repository. Continue? *Yes*\n\nNow push your repo contents to github.\n\n>> git push -u origin main\n\n\n\nIf you got an error with the *git push -u origin main* command you should:\n 1. Open the permission panel with the button in the lower left part of your Gitpod: you are editing permissions granted to *Gitpod Web*. Check your popup blocker if no new tab is displayed\n 2. This opens a settings page with an *Integrations* menu item selected.\n 3. look for the *Github* among the *Git providers* and open the *...* menu: pick *Edit permissions*\n 4. Check the *public_repo* permission in the modal and hit *Update permissions*\n 5. There may be a new window by Github asking you to confirm the choice, do so and you can go back to Gitpod IDE\n 6. Now the git push -u origin main command will succeed.\n\n"
    }
  ]
}